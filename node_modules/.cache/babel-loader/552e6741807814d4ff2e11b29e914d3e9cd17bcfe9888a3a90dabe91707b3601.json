{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\OneDrive\\\\Desktop\\\\project\\\\geo-dashboard\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useGetCountriesQuery, useLazyGetCountryPopulationQuery } from '../features/apiSlice';\nimport HighchartsReact from 'highcharts-react-official';\nimport Highcharts from 'highcharts';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './dashboard.css';\nimport InfoPopup from '../components/infopopup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const {\n    data: countriesData,\n    isLoading: isLoadingCountries,\n    error\n  } = useGetCountriesQuery();\n  const [triggerGetCountryPopulation] = useLazyGetCountryPopulationQuery();\n  const [populationData, setPopulationData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [range, setRange] = useState({\n    min: 0,\n    max: 19\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const [availableYears, setAvailableYears] = useState([]); // All available years\n  const [selectedYear, setSelectedYear] = useState(2018); // Default selected year\n\n  // Fetch population data on initial load\n  useEffect(() => {\n    if (countriesData !== null && countriesData !== void 0 && countriesData.data) {\n      const fetchPopulations = async () => {\n        try {\n          const filteredCountries = countriesData.data.slice(46); // Skip first 46 countries\n\n          const populationPromises = filteredCountries.map(countryItem => triggerGetCountryPopulation({\n            country: countryItem.country\n          }).unwrap());\n          const results = await Promise.all(populationPromises);\n          const data = results.flatMap((result, index) => {\n            return result.data.populationCounts.map(pop => ({\n              country: filteredCountries[index].country,\n              year: pop.year,\n              population: pop.value\n            }));\n          });\n          const uniqueYears = [...new Set(data.map(item => item.year))].sort((a, b) => b - a);\n          setAvailableYears(uniqueYears);\n          setPopulationData(data);\n          filterDataByYear(data, selectedYear);\n        } catch (err) {\n          console.error('Error fetching population data:', err);\n        }\n      };\n      fetchPopulations();\n    }\n  }, [countriesData, triggerGetCountryPopulation, selectedYear]);\n\n  // Filter data by year\n  const filterDataByYear = (data, year) => {\n    const filtered = data.filter(item => item.year === year);\n    setFilteredData(filtered);\n    setRange({\n      min: 0,\n      max: Math.min(filtered.length - 1, 19)\n    });\n  };\n\n  // Handle year change\n  const handleYearChange = event => {\n    const year = parseInt(event.target.value, 10);\n    setSelectedYear(year);\n    filterDataByYear(populationData, year);\n  };\n\n  // Search handler\n  const handleSearch = term => {\n    setSearchTerm(term);\n    const filtered = populationData.filter(data => data.year === selectedYear && data.country.toLowerCase().includes(term.toLowerCase()));\n    setFilteredData(filtered);\n    setRange({\n      min: 0,\n      max: Math.min(filtered.length - 1, 19)\n    });\n    setSuggestions([]);\n  };\n\n  // Input change handler\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setSearchTerm(value);\n    if (value.length >= 2) {\n      const matchedSuggestions = populationData.filter(data => data.year === selectedYear).map(data => data.country).filter(country => country.toLowerCase().includes(value.toLowerCase()));\n      setSuggestions([...new Set(matchedSuggestions)]);\n    } else {\n      setSuggestions([]);\n    }\n    if (value === '') {\n      filterDataByYear(populationData, selectedYear);\n    }\n  };\n\n  // Pagination handlers\n  const handleNext = () => {\n    const total = filteredData.length;\n    if (range.max < total - 1) {\n      setRange(prev => ({\n        min: Math.min(prev.min + 20, total - 20),\n        max: Math.min(prev.max + 20, total - 1)\n      }));\n    }\n  };\n  const handlePrev = () => {\n    if (range.min > 0) {\n      setRange(prev => ({\n        min: Math.max(prev.min - 20, 0),\n        max: Math.max(prev.max - 20, 19)\n      }));\n    }\n  };\n\n  // Chart configuration\n  const chartOptions = {\n    chart: {\n      type: 'column',\n      width: 1200\n    },\n    title: {\n      text: `Population of Countries (${selectedYear})`\n    },\n    xAxis: {\n      categories: filteredData.map(data => data.country),\n      title: {\n        text: 'Country'\n      },\n      labels: {\n        rotation: -45,\n        style: {\n          fontSize: '10px',\n          whiteSpace: 'nowrap'\n        }\n      },\n      min: range.min,\n      max: range.max\n    },\n    yAxis: {\n      title: {\n        text: 'Population'\n      }\n    },\n    tooltip: {\n      shared: true,\n      crosshairs: true\n    },\n    series: [{\n      name: 'Population',\n      data: filteredData.map(data => data.population),\n      color: '#7cb5ec'\n    }],\n    legend: {\n      enabled: false\n    },\n    plotOptions: {\n      series: {\n        pointWidth: 15,\n        point: {\n          events: {\n            click: function () {\n              setSelectedCountry(this.category);\n            }\n          }\n        }\n      }\n    }\n  };\n  if (isLoadingCountries) return /*#__PURE__*/_jsxDEV(Spinner, {\n    animation: \"border\",\n    variant: \"primary\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 34\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error loading data: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"dashboard-title\",\n      children: \"Population by Country\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year-filter\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"year-select\",\n          children: \"Year: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"year-select\",\n          value: selectedYear,\n          onChange: handleYearChange,\n          children: availableYears.map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: year,\n            children: year\n          }, year, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"search-input\",\n        placeholder: \"Search for a country...\",\n        value: searchTerm,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"suggestions-dropdown\",\n        children: suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"suggestion-item\",\n          onClick: () => handleSearch(suggestion),\n          children: suggestion\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"search-button\",\n        onClick: () => handleSearch(searchTerm),\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-wrapper\",\n      children: [filteredData.length > 0 ? /*#__PURE__*/_jsxDEV(HighchartsReact, {\n        highcharts: Highcharts,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"No population data available for \", selectedYear, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"prev-button\",\n          onClick: handlePrev,\n          disabled: range.min === 0,\n          children: \"\\u2190\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next-button\",\n          onClick: handleNext,\n          disabled: range.max >= filteredData.length - 1,\n          children: \"\\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), selectedCountry && /*#__PURE__*/_jsxDEV(InfoPopup, {\n      country: selectedCountry,\n      onClose: () => setSelectedCountry(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"3VpVoYd6jD90fWJFOcgS852PdrM=\", false, function () {\n  return [useGetCountriesQuery, useLazyGetCountryPopulationQuery];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useGetCountriesQuery","useLazyGetCountryPopulationQuery","HighchartsReact","Highcharts","Spinner","InfoPopup","jsxDEV","_jsxDEV","Dashboard","_s","data","countriesData","isLoading","isLoadingCountries","error","triggerGetCountryPopulation","populationData","setPopulationData","filteredData","setFilteredData","range","setRange","min","max","searchTerm","setSearchTerm","suggestions","setSuggestions","selectedCountry","setSelectedCountry","availableYears","setAvailableYears","selectedYear","setSelectedYear","fetchPopulations","filteredCountries","slice","populationPromises","map","countryItem","country","unwrap","results","Promise","all","flatMap","result","index","populationCounts","pop","year","population","value","uniqueYears","Set","item","sort","a","b","filterDataByYear","err","console","filtered","filter","Math","length","handleYearChange","event","parseInt","target","handleSearch","term","toLowerCase","includes","handleInputChange","e","matchedSuggestions","handleNext","total","prev","handlePrev","chartOptions","chart","type","width","title","text","xAxis","categories","labels","rotation","style","fontSize","whiteSpace","yAxis","tooltip","shared","crosshairs","series","name","color","legend","enabled","plotOptions","pointWidth","point","events","click","category","animation","variant","fileName","_jsxFileName","lineNumber","columnNumber","children","message","className","htmlFor","id","onChange","placeholder","suggestion","onClick","highcharts","options","disabled","onClose","_c","$RefreshReg$"],"sources":["C:/Users/hp/OneDrive/Desktop/project/geo-dashboard/src/pages/dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  useGetCountriesQuery,\r\n  useLazyGetCountryPopulationQuery,\r\n} from '../features/apiSlice';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport Highcharts from 'highcharts';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport './dashboard.css';\r\nimport InfoPopup from '../components/infopopup';\r\n\r\nconst Dashboard = () => {\r\n  const { data: countriesData, isLoading: isLoadingCountries, error } = useGetCountriesQuery();\r\n  const [triggerGetCountryPopulation] = useLazyGetCountryPopulationQuery();\r\n\r\n  const [populationData, setPopulationData] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [range, setRange] = useState({ min: 0, max: 19 });\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState(null);\r\n  const [availableYears, setAvailableYears] = useState([]); // All available years\r\n  const [selectedYear, setSelectedYear] = useState(2018);   // Default selected year\r\n\r\n  // Fetch population data on initial load\r\n  useEffect(() => {\r\n    if (countriesData?.data) {\r\n      const fetchPopulations = async () => {\r\n        try {\r\n          const filteredCountries = countriesData.data.slice(46); // Skip first 46 countries\r\n\r\n          const populationPromises = filteredCountries.map((countryItem) =>\r\n            triggerGetCountryPopulation({ country: countryItem.country }).unwrap()\r\n          );\r\n\r\n          const results = await Promise.all(populationPromises);\r\n\r\n          const data = results.flatMap((result, index) => {\r\n            return result.data.populationCounts.map((pop) => ({\r\n              country: filteredCountries[index].country,\r\n              year: pop.year,\r\n              population: pop.value,\r\n            }));\r\n          });\r\n\r\n          const uniqueYears = [...new Set(data.map((item) => item.year))].sort((a, b) => b - a);\r\n          setAvailableYears(uniqueYears);\r\n          setPopulationData(data);\r\n          filterDataByYear(data, selectedYear);\r\n        } catch (err) {\r\n          console.error('Error fetching population data:', err);\r\n        }\r\n      };\r\n\r\n      fetchPopulations();\r\n    }\r\n  }, [countriesData, triggerGetCountryPopulation, selectedYear]);\r\n\r\n  // Filter data by year\r\n  const filterDataByYear = (data, year) => {\r\n    const filtered = data.filter((item) => item.year === year);\r\n    setFilteredData(filtered);\r\n    setRange({ min: 0, max: Math.min(filtered.length - 1, 19) });\r\n  };\r\n  \r\n\r\n  // Handle year change\r\n  const handleYearChange = (event) => {\r\n    const year = parseInt(event.target.value, 10);\r\n    setSelectedYear(year);\r\n    filterDataByYear(populationData, year);\r\n  };\r\n\r\n  // Search handler\r\n  const handleSearch = (term) => {\r\n    setSearchTerm(term);\r\n    const filtered = populationData.filter(\r\n      (data) => data.year === selectedYear && data.country.toLowerCase().includes(term.toLowerCase())\r\n    );\r\n    setFilteredData(filtered);\r\n    setRange({ min: 0, max: Math.min(filtered.length - 1, 19) });\r\n    setSuggestions([]);\r\n  };\r\n\r\n  // Input change handler\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setSearchTerm(value);\r\n\r\n    if (value.length >= 2) {\r\n      const matchedSuggestions = populationData\r\n        .filter((data) => data.year === selectedYear)\r\n        .map((data) => data.country)\r\n        .filter((country) => country.toLowerCase().includes(value.toLowerCase()));\r\n      setSuggestions([...new Set(matchedSuggestions)]);\r\n    } else {\r\n      setSuggestions([]);\r\n    }\r\n\r\n    if (value === '') {\r\n      filterDataByYear(populationData, selectedYear);\r\n    }\r\n  };\r\n\r\n  // Pagination handlers\r\n  const handleNext = () => {\r\n    const total = filteredData.length;\r\n    if (range.max < total - 1) {\r\n      setRange((prev) => ({\r\n        min: Math.min(prev.min + 20, total - 20),\r\n        max: Math.min(prev.max + 20, total - 1),\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    if (range.min > 0) {\r\n      setRange((prev) => ({\r\n        min: Math.max(prev.min - 20, 0),\r\n        max: Math.max(prev.max - 20, 19),\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Chart configuration\r\n  const chartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n      width: 1200,\r\n    },\r\n    title: {\r\n      text: `Population of Countries (${selectedYear})`,\r\n    },\r\n    xAxis: {\r\n      categories: filteredData.map((data) => data.country),\r\n      title: { text: 'Country' },\r\n      labels: {\r\n        rotation: -45,\r\n        style: { fontSize: '10px', whiteSpace: 'nowrap' },\r\n      },\r\n      min: range.min,\r\n      max: range.max,\r\n    },\r\n    yAxis: {\r\n      title: { text: 'Population' },\r\n    },\r\n    tooltip: {\r\n      shared: true,\r\n      crosshairs: true,\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Population',\r\n        data: filteredData.map((data) => data.population),\r\n        color: '#7cb5ec',\r\n      },\r\n    ],\r\n    legend: {\r\n      enabled: false,\r\n    },\r\n    plotOptions: {\r\n      series: {\r\n        pointWidth: 15,\r\n        point: {\r\n          events: {\r\n            click: function () {\r\n              setSelectedCountry(this.category);\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  if (isLoadingCountries) return <Spinner animation=\"border\" variant=\"primary\" />;\r\n  if (error) return <div>Error loading data: {error.message}</div>;\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2 className=\"dashboard-title\">Population by Country</h2>\r\n\r\n      <div className=\"filters\">\r\n        <div className=\"year-filter\">\r\n          <label htmlFor=\"year-select\">Year: </label>\r\n          <select id=\"year-select\" value={selectedYear} onChange={handleYearChange}>\r\n            {availableYears.map((year) => (\r\n              <option key={year} value={year}>\r\n                {year}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"search-bar\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"search-input\"\r\n          placeholder=\"Search for a country...\"\r\n          value={searchTerm}\r\n          onChange={handleInputChange}\r\n        />\r\n        {suggestions.length > 0 && (\r\n          <ul className=\"suggestions-dropdown\">\r\n            {suggestions.map((suggestion, index) => (\r\n              <li key={index} className=\"suggestion-item\" onClick={() => handleSearch(suggestion)} >\r\n                {suggestion}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n        <button className=\"search-button\" onClick={() => handleSearch(searchTerm)}>\r\n          Search\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"chart-wrapper\">\r\n        {filteredData.length > 0 ? (\r\n          <HighchartsReact highcharts={Highcharts} options={chartOptions} />\r\n        ) : (\r\n          <div>No population data available for {selectedYear}.</div>\r\n        )}\r\n        <div className=\"pagination-buttons\">\r\n          <button className=\"prev-button\" onClick={handlePrev} disabled={range.min === 0}>\r\n            &larr;\r\n          </button>\r\n          <button className=\"next-button\" onClick={handleNext} disabled={range.max >= filteredData.length - 1}>\r\n            &rarr;\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {selectedCountry && <InfoPopup country={selectedCountry} onClose={() => setSelectedCountry(null)} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}