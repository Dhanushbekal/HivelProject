{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\OneDrive\\\\Desktop\\\\project\\\\geo-dashboard\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useGetCountriesQuery, useLazyGetCountryPopulationQuery } from '../features/apiSlice';\nimport HighchartsReact from 'highcharts-react-official';\nimport Highcharts from 'highcharts';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './dashboard.css';\nimport InfoPopup from '../components/infopopup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const {\n    data: countriesData,\n    isLoading: isLoadingCountries,\n    error\n  } = useGetCountriesQuery();\n  const [triggerGetCountryPopulation] = useLazyGetCountryPopulationQuery();\n  const [populationData, setPopulationData] = useState([]); // Original data with all countries\n  const [filteredData, setFilteredData] = useState([]); // Data after applying search filter\n  const [minRange, setMinRange] = useState(0);\n  const [maxRange, setMaxRange] = useState(19);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null); // To manage the selected country for the modal\n\n  const handleCountryClick = country => {\n    setSelectedCountry(country); // This updates the selectedCountry state and triggers the modal to open\n  };\n  const closePopup = () => {\n    setSelectedCountry(null); // This will close the modal\n  };\n  useEffect(() => {\n    if (countriesData !== null && countriesData !== void 0 && countriesData.data) {\n      const fetchPopulations = async () => {\n        try {\n          const filteredCountries = countriesData.data.slice(46); // Skip first 46 countries\n\n          const populationPromises = filteredCountries.map(countryItem => triggerGetCountryPopulation({\n            country: countryItem.country\n          }).unwrap());\n          const results = await Promise.all(populationPromises);\n          const filteredData = results.map((result, index) => {\n            const population2018 = result.data.populationCounts.find(pop => pop.year === 2018);\n            return population2018 ? {\n              country: filteredCountries[index].country,\n              population: population2018.value\n            } : null;\n          }).filter(Boolean); // Remove null values\n\n          setPopulationData(filteredData); // Store the original full data\n          setFilteredData(filteredData); // Set initial filtered data (same as original)\n        } catch (err) {\n          console.error('Error fetching population data:', err);\n        }\n      };\n      fetchPopulations();\n    }\n  }, [countriesData, triggerGetCountryPopulation]);\n  const handleSearch = country => {\n    const filtered = populationData.filter(data => data.country.toLowerCase().includes(country.toLowerCase()));\n    setFilteredData(filtered);\n    setMinRange(0);\n    setMaxRange(filtered.length > 19 ? 19 : filtered.length - 1);\n  };\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setSearchTerm(value);\n    if (value.length >= 2) {\n      const matchedSuggestions = populationData.map(data => data.country).filter(country => country.toLowerCase().includes(value.toLowerCase()));\n      setSuggestions(matchedSuggestions);\n    } else {\n      setSuggestions([]);\n    }\n\n    // Reset chart data to original when search input is cleared\n    if (value === '') {\n      setFilteredData(populationData); // Reset to original data\n      setMinRange(0);\n      setMaxRange(19);\n    }\n  };\n  const handleSuggestionClick = suggestion => {\n    setSearchTerm(suggestion);\n    setSuggestions([]);\n    handleSearch(suggestion);\n  };\n  const handleNext = () => {\n    const totalCountries = filteredData.length;\n    const countriesPerPage = 20;\n    if (maxRange < totalCountries - 1) {\n      const newMin = Math.min(minRange + countriesPerPage, totalCountries - countriesPerPage);\n      const newMax = newMin + countriesPerPage - 1;\n      setMinRange(newMin);\n      setMaxRange(newMax);\n    }\n  };\n  const handlePrev = () => {\n    const countriesPerPage = 20;\n    if (minRange > 0) {\n      const newMax = Math.max(maxRange - countriesPerPage, countriesPerPage - 1);\n      const newMin = newMax - countriesPerPage + 1;\n      setMinRange(newMin);\n      setMaxRange(newMax);\n    }\n  };\n  const chartOptions = {\n    chart: {\n      type: 'column',\n      width: 1200\n    },\n    title: {\n      text: 'Population of Countries (2018)'\n    },\n    xAxis: {\n      categories: filteredData.map(data => data.country),\n      title: {\n        text: 'Country'\n      },\n      scrollbar: {\n        enabled: true\n      },\n      labels: {\n        rotation: -45,\n        style: {\n          fontSize: '10px',\n          whiteSpace: 'nowrap'\n        }\n      },\n      min: minRange,\n      max: maxRange\n    },\n    yAxis: {\n      title: {\n        text: 'Population'\n      }\n    },\n    tooltip: {\n      shared: true,\n      crosshairs: true\n    },\n    series: [{\n      name: 'Population',\n      data: filteredData.map(data => data.population),\n      color: '#7cb5ec'\n    }],\n    legend: {\n      enabled: false\n    },\n    plotOptions: {\n      series: {\n        pointWidth: 15,\n        point: {\n          events: {\n            click: function () {\n              const clickedCountry = this.category;\n              handleCountryClick(clickedCountry); // Opens the modal when a country is clicked\n            }\n          }\n        }\n      }\n    }\n  };\n  if (isLoadingCountries) return /*#__PURE__*/_jsxDEV(Spinner, {\n    animation: \"border\",\n    variant: \"primary\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 34\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error loading data: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"dashboard-title\",\n      children: \"Population by Country (2018)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"search-input\",\n        placeholder: \"Search for a country...\",\n        value: searchTerm,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"suggestions-dropdown\",\n        children: suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"suggestion-item\",\n          onClick: () => handleSuggestionClick(suggestion),\n          children: suggestion\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"search-button\",\n        onClick: () => handleSearch(searchTerm),\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-wrapper\",\n      children: [filteredData.length > 0 ? /*#__PURE__*/_jsxDEV(HighchartsReact, {\n        highcharts: Highcharts,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No population data available for 2018.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"prev-button\",\n          onClick: handlePrev,\n          disabled: minRange === 0,\n          children: \"\\u2190\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next-button\",\n          onClick: handleNext,\n          disabled: maxRange >= filteredData.length - 1,\n          children: \"\\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), selectedCountry && /*#__PURE__*/_jsxDEV(InfoPopup, {\n      country: selectedCountry,\n      onClose: closePopup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"FrAU5BU6lIycxQSV/5ZbQzEJxwM=\", false, function () {\n  return [useGetCountriesQuery, useLazyGetCountryPopulationQuery];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useGetCountriesQuery","useLazyGetCountryPopulationQuery","HighchartsReact","Highcharts","Spinner","InfoPopup","jsxDEV","_jsxDEV","Dashboard","_s","data","countriesData","isLoading","isLoadingCountries","error","triggerGetCountryPopulation","populationData","setPopulationData","filteredData","setFilteredData","minRange","setMinRange","maxRange","setMaxRange","searchTerm","setSearchTerm","suggestions","setSuggestions","selectedCountry","setSelectedCountry","handleCountryClick","country","closePopup","fetchPopulations","filteredCountries","slice","populationPromises","map","countryItem","unwrap","results","Promise","all","result","index","population2018","populationCounts","find","pop","year","population","value","filter","Boolean","err","console","handleSearch","filtered","toLowerCase","includes","length","handleInputChange","e","target","matchedSuggestions","handleSuggestionClick","suggestion","handleNext","totalCountries","countriesPerPage","newMin","Math","min","newMax","handlePrev","max","chartOptions","chart","type","width","title","text","xAxis","categories","scrollbar","enabled","labels","rotation","style","fontSize","whiteSpace","yAxis","tooltip","shared","crosshairs","series","name","color","legend","plotOptions","pointWidth","point","events","click","clickedCountry","category","animation","variant","fileName","_jsxFileName","lineNumber","columnNumber","children","message","className","placeholder","onChange","onClick","highcharts","options","disabled","onClose","_c","$RefreshReg$"],"sources":["C:/Users/hp/OneDrive/Desktop/project/geo-dashboard/src/pages/dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  useGetCountriesQuery,\r\n  useLazyGetCountryPopulationQuery,\r\n} from '../features/apiSlice';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport Highcharts from 'highcharts';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport './dashboard.css';\r\nimport InfoPopup from '../components/infopopup';\r\n\r\nconst Dashboard = () => {\r\n  const { data: countriesData, isLoading: isLoadingCountries, error } = useGetCountriesQuery();\r\n  const [triggerGetCountryPopulation] = useLazyGetCountryPopulationQuery();\r\n  const [populationData, setPopulationData] = useState([]);  // Original data with all countries\r\n  const [filteredData, setFilteredData] = useState([]);      // Data after applying search filter\r\n  const [minRange, setMinRange] = useState(0);\r\n  const [maxRange, setMaxRange] = useState(19);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState(null);  // To manage the selected country for the modal\r\n\r\n  const handleCountryClick = (country) => {\r\n    setSelectedCountry(country); // This updates the selectedCountry state and triggers the modal to open\r\n  };\r\n\r\n  const closePopup = () => {\r\n    setSelectedCountry(null);  // This will close the modal\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (countriesData?.data) {\r\n      const fetchPopulations = async () => {\r\n        try {\r\n          const filteredCountries = countriesData.data.slice(46); // Skip first 46 countries\r\n\r\n          const populationPromises = filteredCountries.map((countryItem) =>\r\n            triggerGetCountryPopulation({ country: countryItem.country }).unwrap()\r\n          );\r\n\r\n          const results = await Promise.all(populationPromises);\r\n\r\n          const filteredData = results\r\n            .map((result, index) => {\r\n              const population2018 = result.data.populationCounts.find((pop) => pop.year === 2018);\r\n              return population2018\r\n                ? { country: filteredCountries[index].country, population: population2018.value }\r\n                : null;\r\n            })\r\n            .filter(Boolean); // Remove null values\r\n\r\n          setPopulationData(filteredData);  // Store the original full data\r\n          setFilteredData(filteredData);    // Set initial filtered data (same as original)\r\n        } catch (err) {\r\n          console.error('Error fetching population data:', err);\r\n        }\r\n      };\r\n\r\n      fetchPopulations();\r\n    }\r\n  }, [countriesData, triggerGetCountryPopulation]);\r\n\r\n  const handleSearch = (country) => {\r\n    const filtered = populationData.filter((data) =>\r\n      data.country.toLowerCase().includes(country.toLowerCase())\r\n    );\r\n    setFilteredData(filtered);\r\n    setMinRange(0);\r\n    setMaxRange(filtered.length > 19 ? 19 : filtered.length - 1);\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setSearchTerm(value);\r\n\r\n    if (value.length >= 2) {\r\n      const matchedSuggestions = populationData\r\n        .map((data) => data.country)\r\n        .filter((country) => country.toLowerCase().includes(value.toLowerCase()));\r\n      setSuggestions(matchedSuggestions);\r\n    } else {\r\n      setSuggestions([]);\r\n    }\r\n\r\n    // Reset chart data to original when search input is cleared\r\n    if (value === '') {\r\n      setFilteredData(populationData);  // Reset to original data\r\n      setMinRange(0);\r\n      setMaxRange(19);\r\n    }\r\n  };\r\n\r\n  const handleSuggestionClick = (suggestion) => {\r\n    setSearchTerm(suggestion);\r\n    setSuggestions([]);\r\n    handleSearch(suggestion);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    const totalCountries = filteredData.length;\r\n    const countriesPerPage = 20;\r\n    if (maxRange < totalCountries - 1) {\r\n      const newMin = Math.min(minRange + countriesPerPage, totalCountries - countriesPerPage);\r\n      const newMax = newMin + countriesPerPage - 1;\r\n      setMinRange(newMin);\r\n      setMaxRange(newMax);\r\n    }\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    const countriesPerPage = 20;\r\n    if (minRange > 0) {\r\n      const newMax = Math.max(maxRange - countriesPerPage, countriesPerPage - 1);\r\n      const newMin = newMax - countriesPerPage + 1;\r\n      setMinRange(newMin);\r\n      setMaxRange(newMax);\r\n    }\r\n  };\r\n\r\n  const chartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n      width: 1200,\r\n    },\r\n    title: {\r\n      text: 'Population of Countries (2018)',\r\n    },\r\n    xAxis: {\r\n      categories: filteredData.map((data) => data.country),\r\n      title: { text: 'Country' },\r\n      scrollbar: {\r\n        enabled: true,\r\n      },\r\n      labels: {\r\n        rotation: -45,\r\n        style: {\r\n          fontSize: '10px',\r\n          whiteSpace: 'nowrap',\r\n        },\r\n      },\r\n      min: minRange,\r\n      max: maxRange,\r\n    },\r\n    yAxis: {\r\n      title: { text: 'Population' },\r\n    },\r\n    tooltip: {\r\n      shared: true,\r\n      crosshairs: true,\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Population',\r\n        data: filteredData.map((data) => data.population),\r\n        color: '#7cb5ec',\r\n      },\r\n    ],\r\n    legend: {\r\n      enabled: false,\r\n    },\r\n    plotOptions: {\r\n      series: {\r\n        pointWidth: 15,\r\n        point: {\r\n          events: {\r\n            click: function () {\r\n              const clickedCountry = this.category;\r\n              handleCountryClick(clickedCountry); // Opens the modal when a country is clicked\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  if (isLoadingCountries) return <Spinner animation=\"border\" variant=\"primary\" />;\r\n  if (error) return <div>Error loading data: {error.message}</div>;\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2 className=\"dashboard-title\">Population by Country (2018)</h2>\r\n      <div className=\"search-bar\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"search-input\"\r\n          placeholder=\"Search for a country...\"\r\n          value={searchTerm}\r\n          onChange={handleInputChange}\r\n        />\r\n        {suggestions.length > 0 && (\r\n          <ul className=\"suggestions-dropdown\">\r\n            {suggestions.map((suggestion, index) => (\r\n              <li\r\n                key={index}\r\n                className=\"suggestion-item\"\r\n                onClick={() => handleSuggestionClick(suggestion)}\r\n              >\r\n                {suggestion}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n        <button className=\"search-button\" onClick={() => handleSearch(searchTerm)}>\r\n          Search\r\n        </button>\r\n      </div>\r\n      <div className=\"chart-wrapper\">\r\n        {filteredData.length > 0 ? (\r\n          <HighchartsReact highcharts={Highcharts} options={chartOptions} />\r\n        ) : (\r\n          <div>No population data available for 2018.</div>\r\n        )}\r\n        <div className=\"pagination-buttons\">\r\n          <button className=\"prev-button\" onClick={handlePrev} disabled={minRange === 0}>\r\n            &larr;\r\n          </button>\r\n          <button\r\n            className=\"next-button\"\r\n            onClick={handleNext}\r\n            disabled={maxRange >= filteredData.length - 1}\r\n          >\r\n            &rarr;\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {selectedCountry && <InfoPopup country={selectedCountry} onClose={closePopup} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}