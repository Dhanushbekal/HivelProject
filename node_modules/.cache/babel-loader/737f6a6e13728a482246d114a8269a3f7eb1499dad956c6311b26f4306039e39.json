{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\OneDrive\\\\Desktop\\\\project\\\\geo-dashboard\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useGetCountriesQuery, useLazyGetCountryPopulationQuery } from '../features/apiSlice';\nimport HighchartsReact from 'highcharts-react-official';\nimport Highcharts from 'highcharts';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './dashboard.css';\nimport InfoPopup from '../components/infopopup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const {\n    data: countriesData,\n    isLoading: isLoadingCountries,\n    error\n  } = useGetCountriesQuery();\n  const [triggerGetCountryPopulation] = useLazyGetCountryPopulationQuery();\n  const [populationData, setPopulationData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [range, setRange] = useState({\n    min: 0,\n    max: 19\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n\n  // Fetch population data on initial load\n  useEffect(() => {\n    if (countriesData !== null && countriesData !== void 0 && countriesData.data) {\n      const fetchPopulations = async () => {\n        try {\n          const filteredCountries = countriesData.data.slice(46); // Skip first 46 countries\n\n          const populationPromises = filteredCountries.map(countryItem => triggerGetCountryPopulation({\n            country: countryItem.country\n          }).unwrap());\n          const results = await Promise.all(populationPromises);\n          const data = results.map((result, index) => {\n            const population2018 = result.data.populationCounts.find(pop => pop.year === 2018);\n            return population2018 ? {\n              country: filteredCountries[index].country,\n              population: population2018.value\n            } : null;\n          }).filter(Boolean);\n          setPopulationData(data);\n          setFilteredData(data);\n        } catch (err) {\n          console.error('Error fetching population data:', err);\n        }\n      };\n      fetchPopulations();\n    }\n  }, [countriesData, triggerGetCountryPopulation]);\n\n  // Search handler\n  const handleSearch = term => {\n    const filtered = populationData.filter(data => data.country.toLowerCase().includes(term.toLowerCase()));\n    setFilteredData(filtered);\n    setRange({\n      min: 0,\n      max: Math.min(filtered.length - 1, 19)\n    });\n  };\n\n  // Input change handler\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setSearchTerm(value);\n    if (value.length >= 2) {\n      const matchedSuggestions = populationData.map(data => data.country).filter(country => country.toLowerCase().includes(value.toLowerCase()));\n      setSuggestions(matchedSuggestions);\n    } else {\n      setSuggestions([]);\n    }\n    if (value === '') {\n      setFilteredData(populationData);\n      setRange({\n        min: 0,\n        max: 19\n      });\n    }\n  };\n\n  // Pagination handlers\n  const handleNext = () => {\n    const total = filteredData.length;\n    if (range.max < total - 1) {\n      setRange(prev => ({\n        min: Math.min(prev.min + 20, total - 20),\n        max: Math.min(prev.max + 20, total - 1)\n      }));\n    }\n  };\n  const handlePrev = () => {\n    if (range.min > 0) {\n      setRange(prev => ({\n        min: Math.max(prev.min - 20, 0),\n        max: Math.max(prev.max - 20, 19)\n      }));\n    }\n  };\n\n  // Chart configuration\n  const chartOptions = {\n    chart: {\n      type: 'column',\n      width: 1200\n    },\n    title: {\n      text: 'Population of Countries (2018)'\n    },\n    xAxis: {\n      categories: filteredData.map(data => data.country),\n      title: {\n        text: 'Country'\n      },\n      labels: {\n        rotation: -45,\n        style: {\n          fontSize: '10px',\n          whiteSpace: 'nowrap'\n        }\n      },\n      min: range.min,\n      max: range.max\n    },\n    yAxis: {\n      title: {\n        text: 'Population'\n      }\n    },\n    tooltip: {\n      shared: true,\n      crosshairs: true\n    },\n    series: [{\n      name: 'Population',\n      data: filteredData.map(data => data.population),\n      color: '#7cb5ec'\n    }],\n    legend: {\n      enabled: false\n    },\n    plotOptions: {\n      series: {\n        pointWidth: 15,\n        point: {\n          events: {\n            click: function () {\n              setSelectedCountry(this.category);\n            }\n          }\n        }\n      }\n    }\n  };\n  if (isLoadingCountries) return /*#__PURE__*/_jsxDEV(Spinner, {\n    animation: \"border\",\n    variant: \"primary\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 34\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error loading data: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"dashboard-title\",\n      children: \"Population by Country (2018)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"search-input\",\n        placeholder: \"Search for a country...\",\n        value: searchTerm,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"suggestions-dropdown\",\n        children: suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"suggestion-item\",\n          onClick: () => handleSearch(suggestion),\n          children: suggestion\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"search-button\",\n        onClick: () => handleSearch(searchTerm),\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-wrapper\",\n      children: [filteredData.length > 0 ? /*#__PURE__*/_jsxDEV(HighchartsReact, {\n        highcharts: Highcharts,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No population data available for 2018.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"prev-button\",\n          onClick: handlePrev,\n          disabled: range.min === 0,\n          children: \"\\u2190\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next-button\",\n          onClick: handleNext,\n          disabled: range.max >= filteredData.length - 1,\n          children: \"\\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), selectedCountry && /*#__PURE__*/_jsxDEV(InfoPopup, {\n      country: selectedCountry,\n      onClose: () => setSelectedCountry(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"FP5E1E6/+fBdUKyIV99Wan7b4MM=\", false, function () {\n  return [useGetCountriesQuery, useLazyGetCountryPopulationQuery];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useGetCountriesQuery","useLazyGetCountryPopulationQuery","HighchartsReact","Highcharts","Spinner","InfoPopup","jsxDEV","_jsxDEV","Dashboard","_s","data","countriesData","isLoading","isLoadingCountries","error","triggerGetCountryPopulation","populationData","setPopulationData","filteredData","setFilteredData","range","setRange","min","max","searchTerm","setSearchTerm","suggestions","setSuggestions","selectedCountry","setSelectedCountry","fetchPopulations","filteredCountries","slice","populationPromises","map","countryItem","country","unwrap","results","Promise","all","result","index","population2018","populationCounts","find","pop","year","population","value","filter","Boolean","err","console","handleSearch","term","filtered","toLowerCase","includes","Math","length","handleInputChange","e","target","matchedSuggestions","handleNext","total","prev","handlePrev","chartOptions","chart","type","width","title","text","xAxis","categories","labels","rotation","style","fontSize","whiteSpace","yAxis","tooltip","shared","crosshairs","series","name","color","legend","enabled","plotOptions","pointWidth","point","events","click","category","animation","variant","fileName","_jsxFileName","lineNumber","columnNumber","children","message","className","placeholder","onChange","suggestion","onClick","highcharts","options","disabled","onClose","_c","$RefreshReg$"],"sources":["C:/Users/hp/OneDrive/Desktop/project/geo-dashboard/src/pages/dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  useGetCountriesQuery,\r\n  useLazyGetCountryPopulationQuery,\r\n} from '../features/apiSlice';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport Highcharts from 'highcharts';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport './dashboard.css';\r\nimport InfoPopup from '../components/infopopup';\r\n\r\nconst Dashboard = () => {\r\n  const { data: countriesData, isLoading: isLoadingCountries, error } = useGetCountriesQuery();\r\n  const [triggerGetCountryPopulation] = useLazyGetCountryPopulationQuery();\r\n\r\n  const [populationData, setPopulationData] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [range, setRange] = useState({ min: 0, max: 19 });\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState(null);\r\n\r\n  // Fetch population data on initial load\r\n  useEffect(() => {\r\n    if (countriesData?.data) {\r\n      const fetchPopulations = async () => {\r\n        try {\r\n          const filteredCountries = countriesData.data.slice(46); // Skip first 46 countries\r\n\r\n          const populationPromises = filteredCountries.map((countryItem) =>\r\n            triggerGetCountryPopulation({ country: countryItem.country }).unwrap()\r\n          );\r\n\r\n          const results = await Promise.all(populationPromises);\r\n\r\n          const data = results\r\n            .map((result, index) => {\r\n              const population2018 = result.data.populationCounts.find((pop) => pop.year === 2018);\r\n              return population2018\r\n                ? { country: filteredCountries[index].country, population: population2018.value }\r\n                : null;\r\n            })\r\n            .filter(Boolean);\r\n\r\n          setPopulationData(data);\r\n          setFilteredData(data);\r\n        } catch (err) {\r\n          console.error('Error fetching population data:', err);\r\n        }\r\n      };\r\n\r\n      fetchPopulations();\r\n    }\r\n  }, [countriesData, triggerGetCountryPopulation]);\r\n\r\n  // Search handler\r\n  const handleSearch = (term) => {\r\n    const filtered = populationData.filter((data) =>\r\n      data.country.toLowerCase().includes(term.toLowerCase())\r\n    );\r\n    setFilteredData(filtered);\r\n    setRange({ min: 0, max: Math.min(filtered.length - 1, 19) });\r\n  };\r\n\r\n  // Input change handler\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setSearchTerm(value);\r\n\r\n    if (value.length >= 2) {\r\n      const matchedSuggestions = populationData\r\n        .map((data) => data.country)\r\n        .filter((country) => country.toLowerCase().includes(value.toLowerCase()));\r\n      setSuggestions(matchedSuggestions);\r\n    } else {\r\n      setSuggestions([]);\r\n    }\r\n\r\n    if (value === '') {\r\n      setFilteredData(populationData);\r\n      setRange({ min: 0, max: 19 });\r\n    }\r\n  };\r\n\r\n  // Pagination handlers\r\n  const handleNext = () => {\r\n    const total = filteredData.length;\r\n    if (range.max < total - 1) {\r\n      setRange((prev) => ({\r\n        min: Math.min(prev.min + 20, total - 20),\r\n        max: Math.min(prev.max + 20, total - 1),\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    if (range.min > 0) {\r\n      setRange((prev) => ({\r\n        min: Math.max(prev.min - 20, 0),\r\n        max: Math.max(prev.max - 20, 19),\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Chart configuration\r\n  const chartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n      width: 1200,\r\n    },\r\n    title: {\r\n      text: 'Population of Countries (2018)',\r\n    },\r\n    xAxis: {\r\n      categories: filteredData.map((data) => data.country),\r\n      title: { text: 'Country' },\r\n      labels: {\r\n        rotation: -45,\r\n        style: { fontSize: '10px', whiteSpace: 'nowrap' },\r\n      },\r\n      min: range.min,\r\n      max: range.max,\r\n    },\r\n    yAxis: {\r\n      title: { text: 'Population' },\r\n    },\r\n    tooltip: {\r\n      shared: true,\r\n      crosshairs: true,\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Population',\r\n        data: filteredData.map((data) => data.population),\r\n        color: '#7cb5ec',\r\n      },\r\n    ],\r\n    legend: {\r\n      enabled: false,\r\n    },\r\n    plotOptions: {\r\n      series: {\r\n        pointWidth: 15,\r\n        point: {\r\n          events: {\r\n            click: function () {\r\n              setSelectedCountry(this.category);\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  if (isLoadingCountries) return <Spinner animation=\"border\" variant=\"primary\" />;\r\n  if (error) return <div>Error loading data: {error.message}</div>;\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2 className=\"dashboard-title\">Population by Country (2018)</h2>\r\n\r\n      <div className=\"search-bar\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"search-input\"\r\n          placeholder=\"Search for a country...\"\r\n          value={searchTerm}\r\n          onChange={handleInputChange}\r\n        />\r\n        {suggestions.length > 0 && (\r\n          <ul className=\"suggestions-dropdown\">\r\n            {suggestions.map((suggestion, index) => (\r\n              <li key={index} className=\"suggestion-item\" onClick={() => handleSearch(suggestion)}>\r\n                {suggestion}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n        <button className=\"search-button\" onClick={() => handleSearch(searchTerm)}>\r\n          Search\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"chart-wrapper\">\r\n        {filteredData.length > 0 ? (\r\n          <HighchartsReact highcharts={Highcharts} options={chartOptions} />\r\n        ) : (\r\n          <div>No population data available for 2018.</div>\r\n        )}\r\n        <div className=\"pagination-buttons\">\r\n          <button className=\"prev-button\" onClick={handlePrev} disabled={range.min === 0}>\r\n            &larr;\r\n          </button>\r\n          <button className=\"next-button\" onClick={handleNext} disabled={range.max >= filteredData.length - 1}>\r\n            &rarr;\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {selectedCountry && <InfoPopup country={selectedCountry} onClose={() => setSelectedCountry(null)} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SACEC,oBAAoB,EACpBC,gCAAgC,QAC3B,sBAAsB;AAC7B,OAAOC,eAAe,MAAM,2BAA2B;AACvD,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,OAAO,MAAM,yBAAyB;AAC7C,OAAO,iBAAiB;AACxB,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC,IAAI,EAAEC,aAAa;IAAEC,SAAS,EAAEC,kBAAkB;IAAEC;EAAM,CAAC,GAAGd,oBAAoB,CAAC,CAAC;EAC5F,MAAM,CAACe,2BAA2B,CAAC,GAAGd,gCAAgC,CAAC,CAAC;EAExE,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC;IAAEuB,GAAG,EAAE,CAAC;IAAEC,GAAG,EAAE;EAAG,CAAC,CAAC;EACvD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC2B,WAAW,EAAEC,cAAc,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC6B,eAAe,EAAEC,kBAAkB,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;;EAE5D;EACAD,SAAS,CAAC,MAAM;IACd,IAAIa,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAED,IAAI,EAAE;MACvB,MAAMoB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;QACnC,IAAI;UACF,MAAMC,iBAAiB,GAAGpB,aAAa,CAACD,IAAI,CAACsB,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;;UAExD,MAAMC,kBAAkB,GAAGF,iBAAiB,CAACG,GAAG,CAAEC,WAAW,IAC3DpB,2BAA2B,CAAC;YAAEqB,OAAO,EAAED,WAAW,CAACC;UAAQ,CAAC,CAAC,CAACC,MAAM,CAAC,CACvE,CAAC;UAED,MAAMC,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACP,kBAAkB,CAAC;UAErD,MAAMvB,IAAI,GAAG4B,OAAO,CACjBJ,GAAG,CAAC,CAACO,MAAM,EAAEC,KAAK,KAAK;YACtB,MAAMC,cAAc,GAAGF,MAAM,CAAC/B,IAAI,CAACkC,gBAAgB,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,KAAK,IAAI,CAAC;YACpF,OAAOJ,cAAc,GACjB;cAAEP,OAAO,EAAEL,iBAAiB,CAACW,KAAK,CAAC,CAACN,OAAO;cAAEY,UAAU,EAAEL,cAAc,CAACM;YAAM,CAAC,GAC/E,IAAI;UACV,CAAC,CAAC,CACDC,MAAM,CAACC,OAAO,CAAC;UAElBlC,iBAAiB,CAACP,IAAI,CAAC;UACvBS,eAAe,CAACT,IAAI,CAAC;QACvB,CAAC,CAAC,OAAO0C,GAAG,EAAE;UACZC,OAAO,CAACvC,KAAK,CAAC,iCAAiC,EAAEsC,GAAG,CAAC;QACvD;MACF,CAAC;MAEDtB,gBAAgB,CAAC,CAAC;IACpB;EACF,CAAC,EAAE,CAACnB,aAAa,EAAEI,2BAA2B,CAAC,CAAC;;EAEhD;EACA,MAAMuC,YAAY,GAAIC,IAAI,IAAK;IAC7B,MAAMC,QAAQ,GAAGxC,cAAc,CAACkC,MAAM,CAAExC,IAAI,IAC1CA,IAAI,CAAC0B,OAAO,CAACqB,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACH,IAAI,CAACE,WAAW,CAAC,CAAC,CACxD,CAAC;IACDtC,eAAe,CAACqC,QAAQ,CAAC;IACzBnC,QAAQ,CAAC;MAAEC,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAEoC,IAAI,CAACrC,GAAG,CAACkC,QAAQ,CAACI,MAAM,GAAG,CAAC,EAAE,EAAE;IAAE,CAAC,CAAC;EAC9D,CAAC;;EAED;EACA,MAAMC,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAMb,KAAK,GAAGa,CAAC,CAACC,MAAM,CAACd,KAAK;IAC5BxB,aAAa,CAACwB,KAAK,CAAC;IAEpB,IAAIA,KAAK,CAACW,MAAM,IAAI,CAAC,EAAE;MACrB,MAAMI,kBAAkB,GAAGhD,cAAc,CACtCkB,GAAG,CAAExB,IAAI,IAAKA,IAAI,CAAC0B,OAAO,CAAC,CAC3Bc,MAAM,CAAEd,OAAO,IAAKA,OAAO,CAACqB,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACT,KAAK,CAACQ,WAAW,CAAC,CAAC,CAAC,CAAC;MAC3E9B,cAAc,CAACqC,kBAAkB,CAAC;IACpC,CAAC,MAAM;MACLrC,cAAc,CAAC,EAAE,CAAC;IACpB;IAEA,IAAIsB,KAAK,KAAK,EAAE,EAAE;MAChB9B,eAAe,CAACH,cAAc,CAAC;MAC/BK,QAAQ,CAAC;QAAEC,GAAG,EAAE,CAAC;QAAEC,GAAG,EAAE;MAAG,CAAC,CAAC;IAC/B;EACF,CAAC;;EAED;EACA,MAAM0C,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,KAAK,GAAGhD,YAAY,CAAC0C,MAAM;IACjC,IAAIxC,KAAK,CAACG,GAAG,GAAG2C,KAAK,GAAG,CAAC,EAAE;MACzB7C,QAAQ,CAAE8C,IAAI,KAAM;QAClB7C,GAAG,EAAEqC,IAAI,CAACrC,GAAG,CAAC6C,IAAI,CAAC7C,GAAG,GAAG,EAAE,EAAE4C,KAAK,GAAG,EAAE,CAAC;QACxC3C,GAAG,EAAEoC,IAAI,CAACrC,GAAG,CAAC6C,IAAI,CAAC5C,GAAG,GAAG,EAAE,EAAE2C,KAAK,GAAG,CAAC;MACxC,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,MAAME,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIhD,KAAK,CAACE,GAAG,GAAG,CAAC,EAAE;MACjBD,QAAQ,CAAE8C,IAAI,KAAM;QAClB7C,GAAG,EAAEqC,IAAI,CAACpC,GAAG,CAAC4C,IAAI,CAAC7C,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC;QAC/BC,GAAG,EAAEoC,IAAI,CAACpC,GAAG,CAAC4C,IAAI,CAAC5C,GAAG,GAAG,EAAE,EAAE,EAAE;MACjC,CAAC,CAAC,CAAC;IACL;EACF,CAAC;;EAED;EACA,MAAM8C,YAAY,GAAG;IACnBC,KAAK,EAAE;MACLC,IAAI,EAAE,QAAQ;MACdC,KAAK,EAAE;IACT,CAAC;IACDC,KAAK,EAAE;MACLC,IAAI,EAAE;IACR,CAAC;IACDC,KAAK,EAAE;MACLC,UAAU,EAAE1D,YAAY,CAACgB,GAAG,CAAExB,IAAI,IAAKA,IAAI,CAAC0B,OAAO,CAAC;MACpDqC,KAAK,EAAE;QAAEC,IAAI,EAAE;MAAU,CAAC;MAC1BG,MAAM,EAAE;QACNC,QAAQ,EAAE,CAAC,EAAE;QACbC,KAAK,EAAE;UAAEC,QAAQ,EAAE,MAAM;UAAEC,UAAU,EAAE;QAAS;MAClD,CAAC;MACD3D,GAAG,EAAEF,KAAK,CAACE,GAAG;MACdC,GAAG,EAAEH,KAAK,CAACG;IACb,CAAC;IACD2D,KAAK,EAAE;MACLT,KAAK,EAAE;QAAEC,IAAI,EAAE;MAAa;IAC9B,CAAC;IACDS,OAAO,EAAE;MACPC,MAAM,EAAE,IAAI;MACZC,UAAU,EAAE;IACd,CAAC;IACDC,MAAM,EAAE,CACN;MACEC,IAAI,EAAE,YAAY;MAClB7E,IAAI,EAAEQ,YAAY,CAACgB,GAAG,CAAExB,IAAI,IAAKA,IAAI,CAACsC,UAAU,CAAC;MACjDwC,KAAK,EAAE;IACT,CAAC,CACF;IACDC,MAAM,EAAE;MACNC,OAAO,EAAE;IACX,CAAC;IACDC,WAAW,EAAE;MACXL,MAAM,EAAE;QACNM,UAAU,EAAE,EAAE;QACdC,KAAK,EAAE;UACLC,MAAM,EAAE;YACNC,KAAK,EAAE,SAAAA,CAAA,EAAY;cACjBlE,kBAAkB,CAAC,IAAI,CAACmE,QAAQ,CAAC;YACnC;UACF;QACF;MACF;IACF;EACF,CAAC;EAED,IAAInF,kBAAkB,EAAE,oBAAON,OAAA,CAACH,OAAO;IAAC6F,SAAS,EAAC,QAAQ;IAACC,OAAO,EAAC;EAAS;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAC/E,IAAIxF,KAAK,EAAE,oBAAOP,OAAA;IAAAgG,QAAA,GAAK,sBAAoB,EAACzF,KAAK,CAAC0F,OAAO;EAAA;IAAAL,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAEhE,oBACE/F,OAAA;IAAKkG,SAAS,EAAC,qBAAqB;IAAAF,QAAA,gBAClChG,OAAA;MAAIkG,SAAS,EAAC,iBAAiB;MAAAF,QAAA,EAAC;IAA4B;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEjE/F,OAAA;MAAKkG,SAAS,EAAC,YAAY;MAAAF,QAAA,gBACzBhG,OAAA;QACEgE,IAAI,EAAC,MAAM;QACXkC,SAAS,EAAC,cAAc;QACxBC,WAAW,EAAC,yBAAyB;QACrCzD,KAAK,EAAEzB,UAAW;QAClBmF,QAAQ,EAAE9C;MAAkB;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,EACD5E,WAAW,CAACkC,MAAM,GAAG,CAAC,iBACrBrD,OAAA;QAAIkG,SAAS,EAAC,sBAAsB;QAAAF,QAAA,EACjC7E,WAAW,CAACQ,GAAG,CAAC,CAAC0E,UAAU,EAAElE,KAAK,kBACjCnC,OAAA;UAAgBkG,SAAS,EAAC,iBAAiB;UAACI,OAAO,EAAEA,CAAA,KAAMvD,YAAY,CAACsD,UAAU,CAAE;UAAAL,QAAA,EACjFK;QAAU,GADJlE,KAAK;UAAAyD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CACL,eACD/F,OAAA;QAAQkG,SAAS,EAAC,eAAe;QAACI,OAAO,EAAEA,CAAA,KAAMvD,YAAY,CAAC9B,UAAU,CAAE;QAAA+E,QAAA,EAAC;MAE3E;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAEN/F,OAAA;MAAKkG,SAAS,EAAC,eAAe;MAAAF,QAAA,GAC3BrF,YAAY,CAAC0C,MAAM,GAAG,CAAC,gBACtBrD,OAAA,CAACL,eAAe;QAAC4G,UAAU,EAAE3G,UAAW;QAAC4G,OAAO,EAAE1C;MAAa;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBAElE/F,OAAA;QAAAgG,QAAA,EAAK;MAAsC;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACjD,eACD/F,OAAA;QAAKkG,SAAS,EAAC,oBAAoB;QAAAF,QAAA,gBACjChG,OAAA;UAAQkG,SAAS,EAAC,aAAa;UAACI,OAAO,EAAEzC,UAAW;UAAC4C,QAAQ,EAAE5F,KAAK,CAACE,GAAG,KAAK,CAAE;UAAAiF,QAAA,EAAC;QAEhF;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT/F,OAAA;UAAQkG,SAAS,EAAC,aAAa;UAACI,OAAO,EAAE5C,UAAW;UAAC+C,QAAQ,EAAE5F,KAAK,CAACG,GAAG,IAAIL,YAAY,CAAC0C,MAAM,GAAG,CAAE;UAAA2C,QAAA,EAAC;QAErG;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAEL1E,eAAe,iBAAIrB,OAAA,CAACF,SAAS;MAAC+B,OAAO,EAAER,eAAgB;MAACqF,OAAO,EAAEA,CAAA,KAAMpF,kBAAkB,CAAC,IAAI;IAAE;MAAAsE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjG,CAAC;AAEV,CAAC;AAAC7F,EAAA,CA/LID,SAAS;EAAA,QACyDR,oBAAoB,EACpDC,gCAAgC;AAAA;AAAAiH,EAAA,GAFlE1G,SAAS;AAiMf,eAAeA,SAAS;AAAC,IAAA0G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}