{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://countriesnow.space/api/v0.1'\n  }),\n  endpoints: builder => ({\n    // Fetch all countries and their population\n    getCountries: builder.query({\n      query: () => '/countries/population'\n    }),\n    // Fetch states for a given country\n    getStatesByCountry: builder.query({\n      query: ({\n        country\n      }) => ({\n        url: '/countries/states',\n        method: 'POST',\n        body: {\n          country\n        }\n      })\n    }),\n    // Fetch population for a specific country (POST method)\n    getCountryPopulation: builder.query({\n      query: ({\n        country\n      }) => ({\n        url: '/countries/population',\n        method: 'POST',\n        body: {\n          country\n        } // POST request with the country in the body\n      })\n    }),\n    // Fetch cities for a specific country\n    getCitiesByCountry: builder.query({\n      query: ({\n        country\n      }) => ({\n        url: '/countries/cities',\n        // Fetch cities for the country\n        method: 'POST',\n        body: {\n          country\n        }\n      })\n    }),\n    // Fetch population data for cities in a country\n    getCitiesPopulationByCountry: builder.query({\n      query: ({\n        cities\n      }) => ({\n        url: '/countries/population/cities',\n        // Use the same endpoint for population data\n        method: 'POST',\n        body: {\n          cities\n        } // Send cities as an array of city names\n      })\n    })\n  })\n});\nexport default apiSlice;\nexport const {\n  useGetCountriesQuery,\n  useLazyGetCountryPopulationQuery,\n  useLazyGetCitiesByCountryQuery,\n  // Lazy query for cities by country\n  useLazyGetCitiesPopulationByCountryQuery // Lazy query for city populations\n} = apiSlice;","map":{"version":3,"names":["createApi","fetchBaseQuery","apiSlice","reducerPath","baseQuery","baseUrl","endpoints","builder","getCountries","query","getStatesByCountry","country","url","method","body","getCountryPopulation","getCitiesByCountry","getCitiesPopulationByCountry","cities","useGetCountriesQuery","useLazyGetCountryPopulationQuery","useLazyGetCitiesByCountryQuery","useLazyGetCitiesPopulationByCountryQuery"],"sources":["C:/Users/hp/OneDrive/Desktop/project/geo-dashboard/src/features/apiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const apiSlice = createApi({\r\n  reducerPath: 'api',\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://countriesnow.space/api/v0.1' }),\r\n  endpoints: (builder) => ({\r\n    // Fetch all countries and their population\r\n    getCountries: builder.query({\r\n      query: () => '/countries/population',\r\n    }),\r\n\r\n    // Fetch states for a given country\r\n    getStatesByCountry: builder.query({\r\n      query: ({ country }) => ({\r\n        url: '/countries/states',\r\n        method: 'POST',\r\n        body: { country },\r\n      }),\r\n    }),\r\n\r\n    // Fetch population for a specific country (POST method)\r\n    getCountryPopulation: builder.query({\r\n      query: ({ country }) => ({\r\n        url: '/countries/population',\r\n        method: 'POST',\r\n        body: { country }, // POST request with the country in the body\r\n      }),\r\n    }),\r\n\r\n    // Fetch cities for a specific country\r\n    getCitiesByCountry: builder.query({\r\n      query: ({ country }) => ({\r\n        url: '/countries/cities', // Fetch cities for the country\r\n        method: 'POST',\r\n        body: { country },\r\n      }),\r\n    }),\r\n\r\n    // Fetch population data for cities in a country\r\n    getCitiesPopulationByCountry: builder.query({\r\n      query: ({ cities}) => ({\r\n        url: '/countries/population/cities', // Use the same endpoint for population data\r\n        method: 'POST',\r\n        body: { cities }, // Send cities as an array of city names\r\n      }),\r\n    }),\r\n  }),\r\n});\r\n\r\nexport default apiSlice;\r\n\r\nexport const {\r\n  useGetCountriesQuery,\r\n  useLazyGetCountryPopulationQuery,\r\n  useLazyGetCitiesByCountryQuery, // Lazy query for cities by country\r\n  useLazyGetCitiesPopulationByCountryQuery, // Lazy query for city populations\r\n} = apiSlice;\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EAChCG,WAAW,EAAE,KAAK;EAClBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAAsC,CAAC,CAAC;EAC7EC,SAAS,EAAGC,OAAO,KAAM;IACvB;IACAC,YAAY,EAAED,OAAO,CAACE,KAAK,CAAC;MAC1BA,KAAK,EAAEA,CAAA,KAAM;IACf,CAAC,CAAC;IAEF;IACAC,kBAAkB,EAAEH,OAAO,CAACE,KAAK,CAAC;MAChCA,KAAK,EAAEA,CAAC;QAAEE;MAAQ,CAAC,MAAM;QACvBC,GAAG,EAAE,mBAAmB;QACxBC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UAAEH;QAAQ;MAClB,CAAC;IACH,CAAC,CAAC;IAEF;IACAI,oBAAoB,EAAER,OAAO,CAACE,KAAK,CAAC;MAClCA,KAAK,EAAEA,CAAC;QAAEE;MAAQ,CAAC,MAAM;QACvBC,GAAG,EAAE,uBAAuB;QAC5BC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UAAEH;QAAQ,CAAC,CAAE;MACrB,CAAC;IACH,CAAC,CAAC;IAEF;IACAK,kBAAkB,EAAET,OAAO,CAACE,KAAK,CAAC;MAChCA,KAAK,EAAEA,CAAC;QAAEE;MAAQ,CAAC,MAAM;QACvBC,GAAG,EAAE,mBAAmB;QAAE;QAC1BC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UAAEH;QAAQ;MAClB,CAAC;IACH,CAAC,CAAC;IAEF;IACAM,4BAA4B,EAAEV,OAAO,CAACE,KAAK,CAAC;MAC1CA,KAAK,EAAEA,CAAC;QAAES;MAAM,CAAC,MAAM;QACrBN,GAAG,EAAE,8BAA8B;QAAE;QACrCC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UAAEI;QAAO,CAAC,CAAE;MACpB,CAAC;IACH,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,eAAehB,QAAQ;AAEvB,OAAO,MAAM;EACXiB,oBAAoB;EACpBC,gCAAgC;EAChCC,8BAA8B;EAAE;EAChCC,wCAAwC,CAAE;AAC5C,CAAC,GAAGpB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}